#include "imports/stdlib.fc";

const op::increase = "op::increase"c;
const op::flush = "op::flush"c;

;; storage variables
global int ctx_counter_1;
global int ctx_counter_2;
global int ctx_counter_3;
global int counter_1_initial_value;
global int counter_2_initial_value;
global int counter_3_initial_value;

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();
    ctx_counter_1 = ds~load_uint(32);
    ctx_counter_2 = ds~load_uint(32);
    ctx_counter_3 = ds~load_uint(32);
    counter_1_initial_value = ds~load_uint(32);
    counter_2_initial_value = ds~load_uint(32);
    counter_3_initial_value = ds~load_uint(32);
    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_counter_1, 32)
            .store_uint(ctx_counter_2, 32)
            .store_uint(ctx_counter_3, 32)
            .store_uint(counter_1_initial_value, 32)
            .store_uint(counter_2_initial_value, 32)
            .store_uint(counter_3_initial_value, 32)
            .end_cell()
    );
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    load_data(); ;; here we populate the storage variables

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::increase) {
        int counter_number = in_msg_body~load_uint(32);
        int increase_by = in_msg_body~load_uint(32);
        if (counter_number == 3) {
            ctx_counter_3 += increase_by;
        } elseif (counter_number == 2) {
            ctx_counter_2 += increase_by;
        } elseif (counter_number == 1) {
            ctx_counter_1 += increase_by;
        } else {
            throw(400); ;; incorrect number is passed
        }
        save_data();

        ;; return unspent grams back
        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 106)
            .store_uint(1, 1)
            .store_ref(begin_cell()
                .store_uint(0, 32)
                .store_uint(query_id, 64)
                .end_cell())
            .end_cell(),
            64);

        return ();
    }

    if (op == op::flush) {
        int counter_number = in_msg_body~load_uint(32);

        if (counter_number == 1) {
            ctx_counter_1 = counter_1_initial_value;
        } elseif (counter_number == 2) {
            ctx_counter_2 = counter_2_initial_value;
        } elseif (counter_number == 3) {
            ctx_counter_3 = counter_3_initial_value;
        } else {
            throw(400); ;; incorrect number is passed
        }
        save_data();

        ;; return unspent grams back
        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 106)
            .store_uint(1, 1)
            .store_ref(begin_cell()
                .store_uint(0, 32)
                .store_uint(query_id, 64)
                .end_cell())
            .end_cell(),
            64);

        return ();
    }

    throw(0xffff);
}

(int, int, int) get_counters() method_id {
    load_data();
    return (ctx_counter_1, ctx_counter_2, ctx_counter_3);
}
